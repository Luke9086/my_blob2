---
import Layout from './Layout.astro';

interface Props {
	title?: string;
}

const { title = "Blog Post" } = Astro.props;
---

<Layout title={title}>
	<button class="mobile-menu-toggle" id="mobileMenuToggle" aria-label="Toggle menu">
		☰
	</button>
	<div class="page-layout">
		<aside class="sidebar" id="sidebar">
			<nav class="markdown-nav">
				<a href="/">← Home</a>
				<a href="/blog/">← Blog</a>
			</nav>
			<div class="toc-container" id="tocContainer">
				<!-- TOC will be generated here -->
			</div>
		</aside>
		<main class="main-content">
			<div class="markdown-content">
				<article>
					<slot />
				</article>
			</div>
		</main>
	</div>
	<button class="scroll-to-top" id="scrollToTop" aria-label="Scroll to top">
		↑
	</button>
</Layout>

<style>
	/* Page layout */
	.page-layout {
		display: flex;
		min-height: 100vh;
		gap: 0;
	}

	/* Sidebar styling */
	.sidebar {
		position: fixed;
		left: 0;
		top: 0;
		width: 280px;
		height: 100vh;
		background: var(--bg-secondary);
		border-right: 1px solid var(--border-color);
		padding: 2rem 1.5rem;
		overflow-y: auto;
		z-index: 100;
		box-shadow: 2px 0 8px rgba(0, 0, 0, 0.1);
		/* Custom scrollbar styling */
		scrollbar-width: thin;
		scrollbar-color: rgb(var(--accent)) var(--bg-tertiary);
	}

	/* Webkit scrollbar styling for sidebar */
	.sidebar::-webkit-scrollbar {
		width: 8px;
	}

	.sidebar::-webkit-scrollbar-track {
		background: var(--bg-tertiary);
		border-radius: 4px;
	}

	.sidebar::-webkit-scrollbar-thumb {
		background: rgb(var(--accent));
		border-radius: 4px;
		transition: background 0.3s ease;
	}

	.sidebar::-webkit-scrollbar-thumb:hover {
		background: rgb(var(--accent-light));
	}

	.main-content {
		flex: 1;
		margin-left: 280px;
		min-height: 100vh;
	}

	.markdown-nav {
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
		margin-bottom: 2rem;
		padding-bottom: 1rem;
		border-bottom: 1px solid var(--border-color);
	}

	.markdown-nav a {
		color: var(--text-muted);
		text-decoration: none;
		font-size: 0.9rem;
		padding: 0.5rem 0;
		transition: color 0.2s ease;
	}

	.markdown-nav a:hover {
		color: rgb(var(--accent-light));
	}

	article {
		position: relative;
	}

	/* Table of contents styling for sidebar */
	.toc-container {
		position: sticky;
		top: 0;
	}

	.toc {
		background: transparent;
		border: none;
		border-radius: 0;
		padding: 0;
		margin: 0;
		width: 100%;
	}

	.toc h3 {
		margin-top: 0;
		margin-bottom: 1rem;
		color: rgb(var(--accent-light));
		font-size: 1rem;
		text-transform: uppercase;
		letter-spacing: 0.05em;
		padding-bottom: 0.5rem;
		border-bottom: 1px solid var(--border-color);
	}

	.toc ul {
		list-style: none;
		padding: 0;
		margin: 0;
	}

	.toc li {
		margin-bottom: 0.25rem;
	}

	.toc a {
		color: var(--text-muted);
		font-size: 0.875rem;
		text-decoration: none;
		display: block;
		padding: 0.5rem 0.75rem;
		border-radius: 0.375rem;
		border-bottom: none;
		transition: all 0.2s ease;
		border-left: 3px solid transparent;
	}

	.toc a:hover {
		color: rgb(var(--accent-light));
		background: rgba(var(--accent), 0.1);
		border-left-color: rgb(var(--accent));
		padding-left: 1rem;
	}

	.toc a.active {
		color: rgb(var(--accent-light));
		background: rgba(var(--accent), 0.15);
		border-left-color: rgb(var(--accent));
	}

	/* Responsive design */
	@media (max-width: 1024px) {
		.sidebar {
			transform: translateX(-100%);
			transition: transform 0.3s ease;
		}

		.sidebar.open {
			transform: translateX(0);
		}

		.main-content {
			margin-left: 0;
		}

		.mobile-menu-toggle {
			position: fixed;
			top: 1rem;
			left: 1rem;
			z-index: 101;
			background: var(--bg-secondary);
			border: 1px solid var(--border-color);
			color: var(--text-color);
			padding: 0.5rem;
			border-radius: 0.375rem;
			cursor: pointer;
		}
	}

	/* Additional scroll-to-top button styling */
	.scroll-to-top {
		position: fixed !important;
		bottom: 2rem !important;
		right: 2rem !important;
		background: rgb(var(--accent)) !important;
		color: white !important;
		border: none !important;
		border-radius: 50% !important;
		width: 3rem !important;
		height: 3rem !important;
		cursor: pointer !important;
		opacity: 0 !important;
		transition: all 0.3s ease !important;
		z-index: 1000 !important;
		display: flex !important;
		align-items: center !important;
		justify-content: center !important;
		font-size: 1.5rem !important;
		font-weight: bold !important;
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3) !important;
	}

	.scroll-to-top.visible {
		opacity: 1 !important;
	}

	.scroll-to-top:hover {
		background: rgb(var(--accent-dark)) !important;
		transform: translateY(-2px) !important;
		box-shadow: 0 6px 16px rgba(0, 0, 0, 0.4) !important;
	}
</style>

<script>
	// Scroll to top functionality
	function initScrollToTop() {
		const scrollToTopButton = document.getElementById('scrollToTop');
		
		if (scrollToTopButton) {
			// Show/hide button based on scroll position
			function toggleScrollButton() {
				if (window.pageYOffset > 300) {
					scrollToTopButton.classList.add('visible');
				} else {
					scrollToTopButton.classList.remove('visible');
				}
			}

			// Initial check
			toggleScrollButton();

			// Listen for scroll events
			window.addEventListener('scroll', toggleScrollButton);

			// Click handler
			scrollToTopButton.addEventListener('click', () => {
				window.scrollTo({
					top: 0,
					behavior: 'smooth'
				});
			});
		}
	}

	// Auto-generate table of contents in sidebar
	function generateTOC() {
		const headings = document.querySelectorAll('article h1, article h2, article h3, article h4');
		const tocContainer = document.getElementById('tocContainer');
		
		if (headings.length < 2 || !tocContainer) return;

		const toc = document.createElement('div');
		toc.className = 'toc';
		
		const tocTitle = document.createElement('h3');
		tocTitle.textContent = 'Contents';
		toc.appendChild(tocTitle);

		const tocList = document.createElement('ul');
		
		headings.forEach((heading, index) => {
			const id = `heading-${index}`;
			heading.id = id;
			
			const listItem = document.createElement('li');
			const link = document.createElement('a');
			link.href = `#${id}`;
			link.textContent = heading.textContent;
			
			// Add indentation based on heading level
			const level = parseInt(heading.tagName.charAt(1));
			link.style.paddingLeft = `${(level - 1) * 0.75 + 0.75}rem`;
			
			// Add click handler for smooth scrolling and active state
			link.addEventListener('click', (e) => {
				e.preventDefault();
				heading.scrollIntoView({ behavior: 'smooth', block: 'start' });
				
				// Update active state
				document.querySelectorAll('.toc a').forEach(a => a.classList.remove('active'));
				link.classList.add('active');
			});
			
			listItem.appendChild(link);
			tocList.appendChild(listItem);
		});
		
		toc.appendChild(tocList);
		tocContainer.appendChild(toc);

		// Add scroll spy functionality
		initScrollSpy(headings);
	}

	// Scroll spy to highlight current section
	function initScrollSpy(headings) {
		function updateActiveLink() {
			let current = '';
			
			headings.forEach((heading) => {
				const rect = heading.getBoundingClientRect();
				if (rect.top <= 100) {
					current = heading.id;
				}
			});
			
			document.querySelectorAll('.toc a').forEach(link => {
				link.classList.remove('active');
				if (link.getAttribute('href') === `#${current}`) {
					link.classList.add('active');
				}
			});
		}

		window.addEventListener('scroll', updateActiveLink);
		updateActiveLink(); // Initial call
	}

	// Add copy buttons to code blocks
	function addCopyButtons() {
		const codeBlocks = document.querySelectorAll('pre');
		
		codeBlocks.forEach((block) => {
			const wrapper = document.createElement('div');
			wrapper.className = 'code-block-wrapper';
			wrapper.style.position = 'relative';
			
			block.parentNode?.insertBefore(wrapper, block);
			wrapper.appendChild(block);
			
			const copyButton = document.createElement('button');
			copyButton.className = 'copy-button';
			copyButton.textContent = 'Copy';
			copyButton.style.cssText = `
				position: absolute;
				top: 0.5rem;
				right: 0.5rem;
				background: rgba(255, 255, 255, 0.1);
				color: white;
				border: 1px solid rgba(255, 255, 255, 0.2);
				border-radius: 0.375rem;
				padding: 0.25rem 0.5rem;
				font-size: 0.75rem;
				cursor: pointer;
				opacity: 0;
				transition: all 0.2s ease;
				backdrop-filter: blur(10px);
			`;
			
			wrapper.appendChild(copyButton);
			
			// Show copy button on hover
			wrapper.addEventListener('mouseenter', () => {
				copyButton.style.opacity = '1';
			});
			
			wrapper.addEventListener('mouseleave', () => {
				copyButton.style.opacity = '0';
			});
			
			// Copy functionality
			copyButton.addEventListener('click', async () => {
				const code = block.querySelector('code')?.textContent || block.textContent;
				
				try {
					await navigator.clipboard.writeText(code || '');
					copyButton.textContent = 'Copied!';
					copyButton.style.background = 'rgba(34, 197, 94, 0.2)';
					copyButton.style.borderColor = 'rgba(34, 197, 94, 0.4)';
					
					setTimeout(() => {
						copyButton.textContent = 'Copy';
						copyButton.style.background = 'rgba(255, 255, 255, 0.1)';
						copyButton.style.borderColor = 'rgba(255, 255, 255, 0.2)';
					}, 2000);
				} catch (err) {
					console.error('Failed to copy code:', err);
					copyButton.textContent = 'Error';
					setTimeout(() => {
						copyButton.textContent = 'Copy';
					}, 2000);
				}
			});
		});
	}

	// Add language labels to code blocks
	function addLanguageLabels() {
		const codeBlocks = document.querySelectorAll('pre code[class*="language-"]');
		
		codeBlocks.forEach((code) => {
			const pre = code.parentElement;
			if (!pre) return;
			
			const className = code.className;
			const language = className.replace('language-', '').toUpperCase();
			
			const label = document.createElement('div');
			label.className = 'code-language-label';
			label.textContent = language;
			label.style.cssText = `
				position: absolute;
				top: 0;
				left: 0;
				background: rgba(var(--accent), 0.8);
				color: white;
				padding: 0.25rem 0.75rem;
				font-size: 0.75rem;
				font-weight: 600;
				border-radius: 0.5rem 0 0.5rem 0;
				text-transform: uppercase;
				letter-spacing: 0.025em;
			`;
			
			const wrapper = pre.parentElement;
			if (wrapper && wrapper.classList.contains('code-block-wrapper')) {
				wrapper.appendChild(label);
			}
		});
	}

	// Mobile menu toggle
	function initMobileMenu() {
		const mobileToggle = document.getElementById('mobileMenuToggle');
		const sidebar = document.getElementById('sidebar');
		
		if (mobileToggle && sidebar) {
			mobileToggle.addEventListener('click', () => {
				sidebar.classList.toggle('open');
			});

			// Close sidebar when clicking outside on mobile
			document.addEventListener('click', (e) => {
				if (window.innerWidth <= 1024 && 
					!sidebar.contains(e.target as Node) && 
					!mobileToggle.contains(e.target as Node)) {
					sidebar.classList.remove('open');
				}
			});
		}
	}

	// Initialize all enhancements
	document.addEventListener('DOMContentLoaded', () => {
		initScrollToTop();
		initMobileMenu();
		generateTOC();
		addCopyButtons();
		addLanguageLabels();
	});
</script>
</Layout>
